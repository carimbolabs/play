name: Deploy on Google Cloud Platform

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Lint
        uses: golangci/golangci-lint-action@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      # - name: Setup Nginx Secret
      #   env:
      #     SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
      #   run: |
      #     cat <<EOF > nginx.conf
      #     server {
      #         listen 8000 default_server;
      #         server_name _;

      #         gzip on;
      #         gzip_vary on;
      #         gzip_proxied any;
      #         gzip_comp_level 6;
      #         gzip_buffers 16 8k;
      #         gzip_http_version 1.1;
      #         gzip_min_length 256;
      #         gzip_types
      #             application/javascript
      #             application/wasm
      #             image/webp
      #             text/css
      #             text/plain;

      #         location ~* \.(?:wasm|js|webp)$ {
      #             access_log off;
      #             log_not_found off;
      #             expires max;
      #             add_header Cache-Control "public";
      #             try_files $uri $uri/ @proxy;
      #         }

      #         location / {
      #             try_files $uri $uri/ @proxy;
      #         }

      #         location @proxy {
      #             proxy_pass http://127.0.0.1:8888;
      #             proxy_http_version 1.1;
      #             # proxy_set_header Upgrade $http_upgrade;
      #             # proxy_set_header Connection "upgrade";
      #             # proxy_set_header Host $host;
      #             # proxy_cache_bypass $http_upgrade;
      #         }

      #         sendfile on;
      #         tcp_nopush on;
      #         tcp_nodelay on;
      #         keepalive_timeout 65;
      #         types_hash_max_size 2048;
      #     }
      #     EOF

      #     if ! gcloud secrets create "${SERVICE_NAME}_nginx_config" --replication-policy='automatic' --data-file=nginx.conf; then
      #       echo "Secret already exists. Adding new version..."
      #       gcloud secrets versions add "${SERVICE_NAME}_nginx_config" --data-file=nginx.conf
      #     fi

      #     export PROJECT_NUMBER=$(gcloud projects describe $(gcloud config get-value project) --format='value(projectNumber)')
      #     gcloud secrets add-iam-policy-binding "${SERVICE_NAME}_nginx_config" --member=serviceAccount:${PROJECT_NUMBER}-compute@developer.gserviceaccount.com --role='roles/secretmanager.secretAccessor'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate Docker
        run: gcloud auth configure-docker --quiet ${{ secrets.REGION }}-docker.pkg.dev

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.REGISTRY }}/${{ secrets.SERVICE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # - name: Setup Sidecar
      #   env:
      #     SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
      #     REGION: ${{ secrets.REGION }}
      #     REGISTRY: ${{ secrets.REGISTRY }}
      #     GITHUB_SHA: ${{ github.sha }}
      #   run: |
      #     cat <<EOF | envsubst > service.yaml
      #     apiVersion: serving.knative.dev/v1
      #     kind: Service
      #     metadata:
      #       name: $SERVICE_NAME
      #       labels:
      #         cloud.googleapis.com/location: $REGION
      #       annotations:
      #         run.googleapis.com/launch-stage: BETA
      #         run.googleapis.com/description: sample tutorial service
      #         run.googleapis.com/ingress: all
      #     spec:
      #       template:
      #         metadata:
      #           annotations:
      #             run.googleapis.com/container-dependencies: "{nginx: [rpc]}"
      #         spec:
      #           containers:
      #             - image: nginx
      #               name: nginx
      #               ports:
      #                 - name: http1
      #                   containerPort: 8000
      #               resources:
      #                 limits:
      #                   cpu: 500m
      #                   memory: 256Mi
      #               volumeMounts:
      #                 - name: nginx-conf-secret
      #                   readOnly: true
      #                   mountPath: /etc/nginx/conf.d/
      #               startupProbe:
      #                 timeoutSeconds: 240
      #                 periodSeconds: 240
      #                 failureThreshold: 1
      #                 tcpSocket:
      #                   port: 8000
      #             - image: $REGISTRY/$SERVICE_NAME:$GITHUB_SHA
      #               name: rpc
      #               env:
      #                 - name: PORT
      #                   value: "8888"
      #               resources:
      #                 limits:
      #                   cpu: 1000m
      #                   memory: 512Mi
      #           volumes:
      #             - name: nginx-conf-secret
      #               secret:
      #                 secretName: play_nginx_config
      #                 items:
      #                   - key: latest
      #                     path: default.conf
      #     EOF

      #     gcloud run services replace service.yaml

      - name: Deploy on Cloud Run
        uses: google-github-actions/deploy-cloudrun@main
        with:
          image: ${{ secrets.REGISTRY }}/${{ secrets.SERVICE_NAME }}:${{ github.sha }}
          service: ${{ secrets.SERVICE_NAME }}
          region: ${{ secrets.REGION }}
